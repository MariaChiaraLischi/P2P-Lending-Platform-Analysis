sumOfPayments_df <- rbind(sumOfPayments_df, new_row)
}
# histogram plot
ggplot(data = sumOfPayments_df, aes(x = sum_of_payments)) + geom_histogram(colour = "white",
fill = "lightblue",
bins = 20,
linetype = "longdash") +
ggtitle("Simulated distribution of first payments considering rating-related default rate") + xlab("sum of first year payments") + ylab("occurences")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
# COMPUTATION OF VALUE AT RISK
VaR_95 = quantile(sumOfPayments_df$sum_of_payments, probs = 0.05)
cat("The 95% Value at Risk (VaR) is", VaR_95)
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedvalue
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum(p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedvalue
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum(p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
cat("The standard deviation of the sum of payments over the 1000 simulations is", expectedvalue))
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum(p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
cat("The standard deviation of the sum of payments over the 1000 simulations is", expectedvalue)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum(p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", expectedvalue, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum( (p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70))
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", expectedvalue, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
expectedvalue = sum( (p2ploans[p2ploans$internal_rating == "E", ]$interest_rate * 0.85 + p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate * 0.70))
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", expectedvalue, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.85
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.70
}
}
expectedvalue
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.85
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.70
}
}
expectedvalue
cat("The expected value of the sum of payments over the 1000 simulations is", expectedvalue, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.85
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedvalue = expectedvalue + p2ploans[i,]$yearly_payment * 0.70
}
}
expectedvalue
cat("The expected value of the sum of payments over the 1000 simulations is", expectedvalue, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in nrow(loansEHR)){
if (p2ploans[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
print("culo")
}
else if (p2ploans[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# SIMULATING FOR 1000 TIMES THE SUCCESS OF THE FIRST YEAR PAYMENTS OF LOANS IN THE E AND HR INTERNAL RATING GROUPS
set.seed(42)
loansEHR = p2ploans[p2ploans$internal_rating %in% c("E", "HR"), ]
sumOfPayments_df = data.frame(simulation_number = numeric(0), sum_of_payments = numeric(0))
for (i in 1:1000) {
value = 0
for (j in 1:nrow(loansEHR)){
trial = runif(1)
if (p2ploans[j,]$internal_rating == "E"){
if (trial >= 0.15){
value = value + p2ploans[j,]$yearly_payment
print("culo")
}
}
else{
if (trial >= 0.30){
value = value + p2ploans[j,]$yearly_payment
}
}
}
new_row = data.frame(simulation_number = i, sum_of_payments = value)
sumOfPayments_df <- rbind(sumOfPayments_df, new_row)
}
# SIMULATING FOR 1000 TIMES THE SUCCESS OF THE FIRST YEAR PAYMENTS OF LOANS IN THE E AND HR INTERNAL RATING GROUPS
set.seed(42)
loansEHR = p2ploans[p2ploans$internal_rating %in% c("E", "HR"), ]
sumOfPayments_df = data.frame(simulation_number = numeric(0), sum_of_payments = numeric(0))
for (i in 1:1000) {
value = 0
for (j in 1:nrow(loansEHR)){
trial = runif(1)
if (p2ploans[j,]$internal_rating == "E"){
if (trial >= 0.15){
value = value + p2ploans[j,]$yearly_payment
}
}
else{
if (trial >= 0.30){
value = value + p2ploans[j,]$yearly_payment
print("culo")
}
}
}
new_row = data.frame(simulation_number = i, sum_of_payments = value)
sumOfPayments_df <- rbind(sumOfPayments_df, new_row)
}
# SIMULATING FOR 1000 TIMES THE SUCCESS OF THE FIRST YEAR PAYMENTS OF LOANS IN THE E AND HR INTERNAL RATING GROUPS
set.seed(42)
loansEHR = p2ploans[p2ploans$internal_rating %in% c("E", "HR"), ]
sumOfPayments_df = data.frame(simulation_number = numeric(0), sum_of_payments = numeric(0))
for (i in 1:1000) {
value = 0
for (j in 1:nrow(loansEHR)){
trial = runif(1)
if (p2ploans[j,]$internal_rating == "E"){
if (trial >= 0.15){
value = value + p2ploans[j,]$yearly_payment
}
}
else{
if (trial >= 0.30){
value = value + p2ploans[j,]$yearly_payment
}
}
}
new_row = data.frame(simulation_number = i, sum_of_payments = value)
sumOfPayments_df <- rbind(sumOfPayments_df, new_row)
}
# histogram plot
ggplot(data = sumOfPayments_df, aes(x = sum_of_payments)) + geom_histogram(colour = "white",
fill = "lightblue",
bins = 20,
linetype = "longdash") +
ggtitle("Simulated distribution of first payments considering rating-related default rate") + xlab("sum of first year payments") + ylab("occurences")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
print("culo")
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
print("culo")
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
print("culo")
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
print("culo")
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in 1:nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
print("culo")
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
print("culo")
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in 1:nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
#print("culo")
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
print("culo")
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in 1:nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
print("culo")
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
expectedValueSumOfPayments = 0
for (i in 1:nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments, "\n")
knitr::opts_chunk$set(echo = TRUE)
# IMPORTING PACKAGES
#install.packages("formatR")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("moments")
library(moments)
set.seed(42)
# IMPORTING AND CLEANING P2P LOANS DATASET
# importing data-set as data-frame from .csv file with relative path
p2ploans = read.csv("p2ploans.csv",
sep = ",",
dec = ".",
header = T,
colClasses = "character")
print("P2P loans dataframe:")
str(p2ploans)
# converting numerical variables in numeric data type
for (tempVar in c('interest_rate', 'maturity', 'dti_ratio', 'risk_free', 'yearly_payment')){
p2ploans[[tempVar]] <- as.numeric(p2ploans[[tempVar]])
}
# COMPUTING STATISTICS OF THE yearly_payment VARIABLE
meanYearlyPayment = mean(p2ploans$yearly_payment)
medianYearlyPayment = median(p2ploans$yearly_payment)
cat("The mean of the yearly payments is:", meanYearlyPayment, "\n")
cat("The median of the yearly payments is:", medianYearlyPayment)
# COMPUTING STATISTICS OF THE VARIABLES
summary(p2ploans)
# HISTOGRAM PLOT
ggplot(p2ploans,
aes(x = yearly_payment)) + geom_histogram(colour = "white",
fill = "lightblue",
bins = 20,
linetype = "longdash") +
ggtitle("Histogram plot of yearly payment") + xlab("yearly payment") + ylab("observations")
# TODO: better names!
skewnessYearlyPayment = skewness(p2ploans$yearly_payment)
kurtosisYearlyPayment = kurtosis(p2ploans$yearly_payment)
cat("The skeweness of the yearly payments is:", skewnessYearlyPayment, "\n")
cat("The kurtosis of the yearly payments is:", kurtosisYearlyPayment)
# TRIANGULAR DISTRIBUTION TO MODEL YEARLY PAYMENTS
# computing the approximate mode, useful for continuous data like yearly payment
custom_mode <- function(x) {
table_x <- table(x)
mode_value <- as.numeric(names(table_x[table_x == max(table_x)]))
return(mode_value)
}
minYearlyPayment = min(p2ploans$yearly_payment)
maxYearlyPayment = max(p2ploans$yearly_payment)
modeYearlyPayment = custom_mode(round(p2ploans$yearly_payment, digits = -2))
cat("The min value of the yearly payments is:", minYearlyPayment, "\n")
cat("The max value of the yearly payments is:", maxYearlyPayment, "\n")
cat("The mode of the yearly payments is:", modeYearlyPayment)
# FIRST YEAR PRESENT VALUE COMPUTATIONS ON HIGHEST YEARLY PAYMENT LOAN
# finding loan with the highest yearly payment and reporting its id
largestYearlyPaymentLoan = subset(p2ploans, yearly_payment == max(p2ploans$yearly_payment))
largestYearlyPaymentLoan_id = largestYearlyPaymentLoan$id
cat("ID associated to the loan with the highest yearly payment:", largestYearlyPaymentLoan_id, "\n")
# computing the present value of the first yearly payment of the loan
largestYearlyPayment_presentValue_year1 = largestYearlyPaymentLoan$yearly_payment * (1 + largestYearlyPaymentLoan$risk_free / 100) ^ (- 1)
cat("Present value of the first yearly payment made on the loan with the highest yearly payment:", largestYearlyPayment_presentValue_year1)
# PRESENT VALUE COMPUTATIONS ON HIGHEST YEARLY PAYMENT LOAN
largestYearlyPayment_presentValue_year2 = largestYearlyPaymentLoan$yearly_payment * (1 + largestYearlyPaymentLoan$risk_free / 100) ^ (- 2)
largestYearlyPayment_presentValue_year3 = largestYearlyPaymentLoan$yearly_payment * (1 + largestYearlyPaymentLoan$risk_free / 100) ^ (- 3)
largestYearlyPayment_presentValue_year4 = largestYearlyPaymentLoan$yearly_payment * (1 + largestYearlyPaymentLoan$risk_free / 100) ^ (- 4)
largestYearlyPayment_presentValue_year5 = largestYearlyPaymentLoan$yearly_payment * (1 + largestYearlyPaymentLoan$risk_free / 100) ^ (- 5)
LargestYearlyPayment_presentValue = sum(largestYearlyPayment_presentValue_year1,
largestYearlyPayment_presentValue_year2,
largestYearlyPayment_presentValue_year3,
largestYearlyPayment_presentValue_year4,
largestYearlyPayment_presentValue_year5)
cat("Present value of the payments made on the loan with the highest yearly payment:", LargestYearlyPayment_presentValue)
# EXPECTED VALUE OF FIRST YEARLY PAYMENT OF LOAN WITH ID = 5
# taking data of the loan
id5Loan = subset(p2ploans, id == 5)
cat("The maturity of the loan with id = 5 is:", id5Loan$maturity, "years \n")
# defining probability of default at first year and computing probability of non default
pd_1year = 0.05 # probability of default at first year
pnd_1year = 1 - pd_1year # probability of non default at first year
# computing expected value
id5Loan_expectedValue_year1 = id5Loan$yearly_payment * pnd_1year
cat("The expected value of first yearly payment of loan with id = 5 is", id5Loan_expectedValue_year1)
# EXPECTED VALUE OF FINAL YEARLY PAYMENT OF LOAN WITH ID = 5
# computing probability of default and non default at third year
pd_3year = pd_1year + pnd_1year * pd_1year + pnd_1year * pnd_1year * pd_1year # probability of default by last (third) year
pnd_3year = pnd_1year ^ 3 # probability of non default at last (third) year
# checking that probabilities sum to 1
flag = pd_3year + pnd_3year
cat("The sum of probabilities of default and non default at third year is", flag, "\n")
id5Loan_expectedValue_year3 = id5Loan$yearly_payment * pnd_3year
cat("The expected value of final (third) yearly payment of loan with id = 5 is", id5Loan_expectedValue_year3)
# EXPECTED VALUE, VARIANCE AND SKEWENESS OF DEFAULTS IN THE FIRST YEAR (CONSIDERING ALL LOANS)
defaults_expectedValue_1year = pd_1year * nrow(p2ploans) # expected value
defaults_variance_1year = nrow(p2ploans) * pd_1year * (1 - pd_1year) # variance
defaults_skeweness_1year = ((1 - pd_1year) - pd_1year) / sqrt(defaults_variance_1year) # skewness
cat("The expected number of defaults in the first year is", defaults_expectedValue_1year, "\n")
cat("The varince of the number of defaults in the first year is", defaults_variance_1year, "\n")
cat("The skeweness of the number of defaults in the first year is", defaults_skeweness_1year)
#expected because it's five percent of the total
# SUM OF EXPECTED PAYMENTS OF LOANS WITH IDs 1-10 AT THE END OF FIRST YEAR
expectedReturns <- (1 - pd_1year) * p2ploans[p2ploans$id %in% 1:10,]$yearly_payment
sumExpectedReturs <- sum(expectedReturns)
cat("The sum of the expected payments of loans with ids 1-10 at the end of the first year is", sumExpectedReturs)
# MEAN OF THE INTEREST RATE FOR AA AND HR GROUPS
meanInterestRate_AAgroup <- mean(p2ploans[p2ploans$internal_rating == "AA", ]$interest_rate)
meanInterestRate_HRgroup <- mean(p2ploans[p2ploans$internal_rating == "HR", ]$interest_rate)
percentagePointsDifference <- abs((meanInterestRate_AAgroup - meanInterestRate_HRgroup))
cat("The mean interest rate for the AA group is", meanInterestRate_AAgroup, "\n")
cat("The mean interest rate for the HR group is", meanInterestRate_HRgroup, "\n")
cat("Difference in Percentage Points:", percentagePointsDifference)
# AA is less risky than HR
# LINEAR REGRESSION MODEL FOR INTEREST RATE ON THE INTERNAL RATINGS
model <- lm(interest_rate ~ factor(internal_rating), data = p2ploans)
summary(model)
# LINEAR REGRESSION MODEL FOR INTEREST RATE ON THE INTERNAL RATINGS NOT CONSIDERING THE INTERCEPT
model_nointercep <- lm(interest_rate ~ 0 + factor(internal_rating), data = p2ploans)
summary(model)
# LINEAR REGRESSION MODEL FOR INTEREST RATE USING INTERNAL RATINGS, DTI RATIO AND MATURITY
model_dtiMaturity <- lm(interest_rate ~ 0 + factor(internal_rating) + dti_ratio + maturity, data = p2ploans)
summary(model_dtiMaturity)
# SIMULATING FOR 1000 TIMES THE SUCCESS OF THE FIRST YEAR PAYMENTS OF LOANS IN THE E AND HR INTERNAL RATING GROUPS
set.seed(42)
loansEHR = p2ploans[p2ploans$internal_rating %in% c("E", "HR"), ]
sumOfPayments_df = data.frame(simulation_number = numeric(0), sum_of_payments = numeric(0))
for (i in 1:1000) {
value = 0
for (j in 1:nrow(loansEHR)){
trial = runif(1)
if (p2ploans[j,]$internal_rating == "E"){
if (trial >= 0.15){
value = value + p2ploans[j,]$yearly_payment
}
}
else{
if (trial >= 0.30){
value = value + p2ploans[j,]$yearly_payment
}
}
}
new_row = data.frame(simulation_number = i, sum_of_payments = value)
sumOfPayments_df <- rbind(sumOfPayments_df, new_row)
}
# histogram plot
ggplot(data = sumOfPayments_df, aes(x = sum_of_payments)) + geom_histogram(colour = "white",
fill = "lightblue",
bins = 20,
linetype = "longdash") +
ggtitle("Simulated distribution of first payments considering rating-related default rate") + xlab("sum of first year payments") + ylab("occurences")
# MEAN AND MEDIAN VALUES OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
meanSumOfPayments = mean(sumOfPayments_df$sum_of_payments)
standardDeviationSumOfPayments = sd(sumOfPayments_df$sum_of_payments)
cat("The mean of the sum of payments over the 1000 simulations is", meanSumOfPayments, "\n")
cat("The standard deviation of the sum of payments over the 1000 simulations is", standardDeviationSumOfPayments)
# EXPECTED VALUE OF SUM OF PAYMENTS OVER THE 1000 SIMULATIONS
expectedValueSumOfPayments = 0
for (i in 1:nrow(loansEHR)){
if (loansEHR[i,]$internal_rating == "E"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.85
}
else if (loansEHR[i,]$internal_rating == "HR"){
expectedValueSumOfPayments = expectedValueSumOfPayments + p2ploans[i,]$yearly_payment * 0.70
}
}
cat("The expected value of the sum of payments over the 1000 simulations is", expectedValueSumOfPayments)
# COMPUTATION OF VALUE AT RISK
VaR_95 = quantile(sumOfPayments_df$sum_of_payments, probs = 0.05)
cat("The 95% Value at Risk (VaR) is", VaR_95)
# IMPORTING PACKAGES
#install.packages("formatR")
#install.packages("ggplot2")
#install.packages("moments")
library(ggplot2)
library(moments)
set.seed(42)
